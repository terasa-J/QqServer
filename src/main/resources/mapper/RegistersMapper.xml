<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.eva.dao.RegistersMapper" >
  <resultMap id="BaseResultMap" type="com.eva.pojo.Registers" >
    <id column="ID" property="id" jdbcType="BIGINT" />
    <result column="client_id" property="clientId" jdbcType="VARCHAR" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="sex" property="sex" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="phonenumber" property="phonenumber" jdbcType="VARCHAR" />
    <result column="certificate" property="certificate" jdbcType="VARCHAR" />
    <result column="register_date" property="registerDate" jdbcType="DATE" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.eva.pojo.Registers" extends="BaseResultMap" >
    <result column="resume" property="resume" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    ID, client_id, name, sex, password, phonenumber, certificate, register_date
  </sql>
  <sql id="Blob_Column_List" >
    resume
  </sql>
  <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="com.eva.pojo.RegistersExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from registers
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.eva.pojo.RegistersExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from registers
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from registers
    where ID = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from registers
    where ID = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.eva.pojo.RegistersExample" >
    delete from registers
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.eva.pojo.Registers" >
    <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into registers (client_id, name, sex, 
      password, phonenumber, certificate, 
      register_date, resume)
    values (#{clientId,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, #{sex,jdbcType=VARCHAR}, 
      #{password,jdbcType=VARCHAR}, #{phonenumber,jdbcType=VARCHAR}, #{certificate,jdbcType=VARCHAR}, 
      #{registerDate,jdbcType=DATE}, #{resume,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.eva.pojo.Registers" >
    <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into registers
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="clientId != null" >
        client_id,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="sex != null" >
        sex,
      </if>
      <if test="password != null" >
        password,
      </if>
      <if test="phonenumber != null" >
        phonenumber,
      </if>
      <if test="certificate != null" >
        certificate,
      </if>
      <if test="registerDate != null" >
        register_date,
      </if>
      <if test="resume != null" >
        resume,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="clientId != null" >
        #{clientId,jdbcType=VARCHAR},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="sex != null" >
        #{sex,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="phonenumber != null" >
        #{phonenumber,jdbcType=VARCHAR},
      </if>
      <if test="certificate != null" >
        #{certificate,jdbcType=VARCHAR},
      </if>
      <if test="registerDate != null" >
        #{registerDate,jdbcType=DATE},
      </if>
      <if test="resume != null" >
        #{resume,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.eva.pojo.RegistersExample" resultType="java.lang.Integer" >
    select count(*) from registers
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update registers
    <set >
      <if test="record.id != null" >
        ID = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.clientId != null" >
        client_id = #{record.clientId,jdbcType=VARCHAR},
      </if>
      <if test="record.name != null" >
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.sex != null" >
        sex = #{record.sex,jdbcType=VARCHAR},
      </if>
      <if test="record.password != null" >
        password = #{record.password,jdbcType=VARCHAR},
      </if>
      <if test="record.phonenumber != null" >
        phonenumber = #{record.phonenumber,jdbcType=VARCHAR},
      </if>
      <if test="record.certificate != null" >
        certificate = #{record.certificate,jdbcType=VARCHAR},
      </if>
      <if test="record.registerDate != null" >
        register_date = #{record.registerDate,jdbcType=DATE},
      </if>
      <if test="record.resume != null" >
        resume = #{record.resume,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map" >
    update registers
    set ID = #{record.id,jdbcType=BIGINT},
      client_id = #{record.clientId,jdbcType=VARCHAR},
      name = #{record.name,jdbcType=VARCHAR},
      sex = #{record.sex,jdbcType=VARCHAR},
      password = #{record.password,jdbcType=VARCHAR},
      phonenumber = #{record.phonenumber,jdbcType=VARCHAR},
      certificate = #{record.certificate,jdbcType=VARCHAR},
      register_date = #{record.registerDate,jdbcType=DATE},
      resume = #{record.resume,jdbcType=LONGVARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update registers
    set ID = #{record.id,jdbcType=BIGINT},
      client_id = #{record.clientId,jdbcType=VARCHAR},
      name = #{record.name,jdbcType=VARCHAR},
      sex = #{record.sex,jdbcType=VARCHAR},
      password = #{record.password,jdbcType=VARCHAR},
      phonenumber = #{record.phonenumber,jdbcType=VARCHAR},
      certificate = #{record.certificate,jdbcType=VARCHAR},
      register_date = #{record.registerDate,jdbcType=DATE}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.eva.pojo.Registers" >
    update registers
    <set >
      <if test="clientId != null" >
        client_id = #{clientId,jdbcType=VARCHAR},
      </if>
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="sex != null" >
        sex = #{sex,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="phonenumber != null" >
        phonenumber = #{phonenumber,jdbcType=VARCHAR},
      </if>
      <if test="certificate != null" >
        certificate = #{certificate,jdbcType=VARCHAR},
      </if>
      <if test="registerDate != null" >
        register_date = #{registerDate,jdbcType=DATE},
      </if>
      <if test="resume != null" >
        resume = #{resume,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where ID = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.eva.pojo.Registers" >
    update registers
    set client_id = #{clientId,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      phonenumber = #{phonenumber,jdbcType=VARCHAR},
      certificate = #{certificate,jdbcType=VARCHAR},
      register_date = #{registerDate,jdbcType=DATE},
      resume = #{resume,jdbcType=LONGVARCHAR}
    where ID = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.eva.pojo.Registers" >
    update registers
    set client_id = #{clientId,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      phonenumber = #{phonenumber,jdbcType=VARCHAR},
      certificate = #{certificate,jdbcType=VARCHAR},
      register_date = #{registerDate,jdbcType=DATE}
    where ID = #{id,jdbcType=BIGINT}
  </update>
</mapper>